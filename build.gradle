plugins {
    id "dev.architectury.loom" version "0.12.0.9999"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group

loom {
    setIntermediaryUrl("https://maven.legacyfabric.net/net/legacyfabric/intermediary-old/${minecraft_version}/intermediary-old-${minecraft_version}-v2.jar")
    customMinecraftManifest.set("https://meta.legacyfabric.net/v2/manifest/${minecraft_version}")

    // since loom 0.10, you are **required** to use the
    // "forge" block to configure forge-specific features,
    // such as the mixinConfigs array or datagen
    forge {
        // specify the mixin configs used in this mod
        // this will be added to the jar manifest as well!
//        mixinConfigs = [
//                "examplemod.mixins.json"
//        ]

        // missing access transformers?
        // don't worry, you can still use them!
        // note that your AT *MUST* be located at
        // src/main/resources/META-INF/accesstransformer.cfg
        // to work as there is currently no config option to change this.
        // also, any names used in your access transformer will need to be
        // in SRG mapped ("func_" / "field_" with MCP class names) to work!
        // (both of these things may be subject to change in the future)

        // this will create a data generator configuration
        // that you can use to automatically generate assets and data
        // using architectury loom. Note that this currently *only* works
        // for forge projects made with architectury loom!
        dataGen {
            mod project.mod_id
        }
    }

    // This allows you to modify your launch configurations,
    // for example to add custom arguments. In this case, we want
    // the data generator to check our resources directory for
    // existing files. (see Forge's ExistingFileHelper for more info)
    launches {
        data {
            arg "--existing", file("src/main/resources").absolutePath
        }
    }
}

parseConfig(file("private.properties"))

@SuppressWarnings("GrMethodMayBeStatic")
def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)

        def obj = new ConfigSlurper().parse(prop).iterator()

        while (obj.hasNext()) {
            def entry = obj.next()

            ext.setProperty(entry.key.toString(), entry.value)
        }
    }
}

def includeMod(String shouldRun, String... modIds) {
    return includeMod(Boolean.parseBoolean(shouldRun), modIds)
}

def includeMod(boolean shouldRun, String... modIds) {
    for (String modId : modIds) {
        if (shouldRun)
            dependencies.modRuntimeOnly(modId)
        dependencies.modCompileOnly(modId)
    }

    return shouldRun
}

repositories {
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        name = "ilexiconn" // LLibrary, had issues with CurseForge, it seems to require llibrary-core
        url = "https://maven.mcmoddev.com"
    }
}

dependencies {
    // to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    // choose what mappings you want to use here
    mappings "de.oceanlabs.mcp:mcp_stable:39-1.12@zip"

    // your forge dependency, this is **required** when using Forge Loom in forge mode!
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // Any local dependencies
//    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Actual dependencies for some new features
    includeMod(project.run_artemislib, "curse.maven:ArtemisLib_1.12.2_v1.0.6-313590:2741812")
    includeMod(project.run_fluidlogged, "curse.maven:FluidloggedAPI_1.8.1c-485654:3851192")

    //  The One Probe
    includeMod(true, "curse.maven:TheOneProbe_1.4.28-245211:2667280")

    boolean kotlinSupport = false
    boolean runBaubles = false
    boolean runMantle = false
    boolean runPatchouli = false
    boolean runCtm = false

    // Extra Utilities 2
    includeMod(project.run_xu2, "curse.maven:ExtraUtilities_1.9.9-225561:2678374")

    // Hatchery and chickens
    includeMod(project.run_chickens,
            "curse.maven:Hatchery_2.2.2-251138:2715498",
            "curse.maven:Chickens_6.1.0-241941:2545467",
            "curse.maven:MoreChickens_3.1.0-251786:2521137")

    // Thaumcraft
    if (includeMod(project.run_thaumcraft,
            "curse.maven:Thaumcraft_6.1.BETA26-223628:2629023",
            "curse.maven:Thaumic_Jei_1.6.0-27-285492:2705304"))
        runBaubles = true

    // JEI and addons
    includeMod(true,
            "curse.maven:JEI_4.15.0.302-238222:3043174",
            "curse.maven:JER_0.9.2.60-240630:2728585")

    // Tinker, Tinker's submods, and mods requiring mantle
    includeMod(project.run_tinkers,
            "curse.maven:TinkersConstruct_12.0.183-74072:2902483")

    includeMod(project.run_natura,
            "curse.maven:Natura_4.3.2.69-74120:2711439")

    // Ice and Fire
    includeMod(project.run_iceandfire,
            "net.ilexiconn:llibrary:1.7.19-1.12.2:dev",
            "net.ilexiconn:llibrary-core:1.0.11-1.12.2",
            "curse.maven:iceandfire-1.9.1-264231:2939529")

    // Thermal Expansion and dependencies
    includeMod(project.run_thermal,
            "curse.maven:CodeChickenLib_3.2.3.358-242818:2779848",
            "curse.maven:RedstoneFlux_2.1.1.1-270789:2920436",

            "curse.maven:CoFHCore_4.6.6.1-69162:2920433",
            "curse.maven:CoFHWorld_1.4.0.1-271384:2920434",

            "curse.maven:ThermalDynamics_2.5.6.1-227443:2920505",
            "curse.maven:ThermalFoundation_2.6.7.1-222880:2926428",
            "curse.maven:ThermalExpansion_5.5.7.1-69163:2926431")

    // Mo' Creatures
    includeMod(project.run_mocreatures,
            "curse.maven:CustomMobSpawner-3.11.5-229261:2859433",
            "curse.maven:MoCreatures_12.0.5-229260:2628698")

    // Dungeon tactics
    includeMod(project.run_dungeon_tactics, "curse.maven:DungeonTactics_0.16.9-242500:3008088")

    // Harvestcraft
    includeMod(project.run_dungeon_tactics,
            "curse.maven:PamsHarvestcraft_1.12.2zg-221857:2904825",
            "curse.maven:JustEnoughHarvestcraft_1.12.2-1.7.2-267939:2997129")

    // Botania and friends
    if (includeMod(run_botania,
            "curse.maven:Bontina_r1.10-363-225643:2846950",
            "curse.maven:ExtraBontina_r1.1-60-beta-hotfix-299086:3112313"))
        runBaubles = true

    // Quark
    includeMod(project.run_quark,
            "curse.maven:AutoRegLib_1.3-32-250363:2746011",
            "curse.maven:Quark_r1.6-179-243121:2924091")

    // Charm
    includeMod(project.run_charm, "curse.maven:Charm-1.12.2-1.4.1-318872:3146596")

    // Craft Tweaker
    includeMod(project.run_craft_tweaker, "curse.maven:CraftTweaker2_1.12-4.1.20.646-239197:3294372")

    // FutureMC
    if (includeMod(project.run_future_mc, "curse.maven:FutureMC_0.2.10.1-310059:3842790"))
        kotlinSupport = true

    // Biomes o' Plenty
    includeMod(project.run_biomes_o_plenty, "curse.maven:Biomes_O_Plenty_7.0.1.2444-220318:2842510")

    // Chisel and CTM
    if (includeMod(project.run_ctm_chisel, "curse.maven:Chisel_1.0.2.45-235279:2915375"))
        runCtm = true

    // Industrial Foregoing
    if (includeMod(project.run_industrial_foregoing,
            "curse.maven:Tesla_1.12.2-1.0.63_deobf-244651:2487962",
            "curse.maven:TeslaCoreLib_1.12.2-1.0.17.25_deobf-254602:2891843",
            "curse.maven:IndustrialForegoing_1.12.2-1.12.13-237_deobf-266515:2745324",

            "curse.maven:GunpowderLib-1.12.2-1.1-356646:3168863",
            "curse.maven:IntegrationForegoing_1.12.2-1.11-277938:3200529"))
        kotlinSupport = true

    // Aether and addons
    includeMod(project.run_aether,
            "curse.maven:Aether_Legacy_1.12.2-v1.5.3.2-255308:3280119",
            "curse.maven:Extra_Moas_v1.2.1-299061:3039636",
            "curse.maven:Aether_Continuation_v1.3.0-294269:3070803",
            "curse.maven:Lost_Aether_Content_1.12.2-v1.0.2-318602:3038185")

    // Extract META-INF/libraries/EnderCore-1.12.2-x.y.z-core.jar from Ender Core jar into libs directory
    includeMod(true, "curse.maven:Ender_Core_1.12.2-0.5.76-231868:2972849")
    // Same as with EnderCore, but AutoConfig and AutoSave
    if (includeMod(project.run_enderio, "curse.maven:Ender_IO_1.12.2-5.2.66-64578:3124452"))
        includeMod(project.run_enderzoo, "curse.maven:Ender_Zoo_1.12.2-5.2.59-303001:2989199")

    if (includeMod(project.run_twilight_forest, "curse.maven:TwilightForest_3.11.1021-227639:3051450")) {
        runPatchouli = true
        runCtm = true
    }

    // Dependencies of multiple mods
    includeMod(kotlinSupport, "curse.maven:Forgelin_1.8.4-1.12.2-248453:2785465")
    includeMod(runBaubles || Boolean.parseBoolean(project.run_baubles), "curse.maven:Baubles_1.5.2-227083:2518667")
    includeMod(runMantle, "curse.maven:Mantle_1.3.3.55-74924:2713386")
    includeMod(runPatchouli, "curse.maven:Patchouli_1.0-23.6-306770:3162874")
    includeMod(runCtm, "curse.maven:CTM_1.0.1.31-267602:2915363")
}

curseforge {
    apiKey = project.api_key
    project {
        id = "358821"
        changelog = file("upload_changelog.txt")
        releaseType = "beta"

        mainArtifact(jar) {
            displayName = "MIA $project.version"
            relations {
                optionalDependency "artemislib"

                optionalDependency "biomes-o-plenty"
                optionalDependency "baubles"
                optionalDependency "botania"
                optionalDependency "charm"
                optionalDependency "chickens"
                optionalDependency "chisel"
                optionalDependency "cofh-core"
                optionalDependency "ctm"
                optionalDependency "dungeon-tactics"
                optionalDependency "ender-io"
                optionalDependency "ender-io-zoo"
                optionalDependency "extra-utilities"
                optionalDependency "extrabotany"
                optionalDependency "future-mc"
                optionalDependency "hatchery"
                optionalDependency "ice-and-fire-dragons"
                optionalDependency "industrial-foregoing"
                optionalDependency "jei"
                optionalDependency "just-enough-resources-jer"
                optionalDependency "mo-creatures"
                optionalDependency "natura"
                optionalDependency "pams-harvestcraft"
                optionalDependency "quark"
                optionalDependency "thaumcraft"
                optionalDependency "the-one-probe"
                optionalDependency "thermal-expansion"
                optionalDependency "thermal-foundation"
                optionalDependency "tinkers-construct"

                optionalDependency "aether"
                optionalDependency "aether-addon"
                optionalDependency "aether-lost-content"
            }
        }
        options {
            //noinspection GrDeprecatedAPIUsage
            debug = true // Leave as true unless publishing, prevents accidental uploads
        }
    }
}

processResources {
    // define properties that can be used during resource processing
    inputs.property "modVersion", project.version
    inputs.property "shortName", project.archivesBaseName
    inputs.property "full", project.full_name
    inputs.property "mcVersion", project.minecraft_version

    // this will replace the property "${modVersion}" in your mcmod.info
    // with the version you've defined in your gradle.properties
    filesMatching("mcmod.info") {
        expand "modVersion": project.version,
                "shortName": project.archivesBaseName,
                "fullName": project.full_name,
                "mcVersion": project.minecraft_version
    }
}

tasks.withType(JavaCompile) {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    options.release = 8
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

